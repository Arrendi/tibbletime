% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_period.R
\name{as_period}
\alias{as_period}
\title{Change \code{tbl_time} periodicity}
\usage{
as_period(x, period = "yearly", start_date = NULL, side = "start", ...)
}
\arguments{
\item{x}{A \code{tbl_time} object.}

\item{side}{Whether to return the date at the beginning or the end of the
new period. By default, the \code{"start"} of the period. Use \code{"end"} to change
to the end of the period.}
}
\description{
Convert a \code{tbl_time} object from daily to monthly,
from minute data to hourly, and more. This allows the user to easily
aggregate data to a less granular level.
}
\details{
This function respects \code{\link[dplyr:group_by]{dplyr::group_by()}} groups.

Currently periods finer than second data are not supported.

The \code{side} argument is useful when you want to return data at, say, the
end of a quarter, or the end of a month.
}
\examples{

# Basic usage ---------------------------------------------------------------

# FB stock prices
data(FB)
FB <- as_tbl_time(FB, date)

# Aggregate FB to yearly data
as_period(FB, "yearly")

# Aggregate FB to yearly data using a period formula
as_period(FB, 1~y)

# Aggregate FB to yearly data, but use the last data point available
# in that period
as_period(FB, "yearly", "end")

# Aggregate to weekly. Notice that it only uses the earliest day available
# in the data set at that periodicity. It will not set the date of the first
# row to 2013-01-01 because that date did not exist in the original data set.
as_period(FB, "weekly")

# Aggregate to every other week
as_period(FB, 2~w)

# FB is daily data, aggregate to minute?
# Does nothing and returns the original data set.
as_period(FB, "minute")

# Grouped usage -------------------------------------------------------------

# FANG contains Facebook, Amazon, Netflix and Google stock prices
data(FANG)
FANG <- as_tbl_time(FANG, date)

FANG <- FANG \%>\% dplyr::group_by(symbol)

# Respects groups
FANG \%>\% as_period("yearly")

# Every 6 months, respecting groups
as_period(FANG, 6~m)

# Using start_date ----------------------------------------------------------

# FB stock prices
data(FB)
FB <- as_tbl_time(FB, date)

# The Facebook series starts at 2013-01-02 so the 'every 2 day' counter
# starts at that date as well. Groups become (2013-01-02, 2013-01-03),
# (2013-01-04, 2013-01-05) and so on.
as_period(FB, 2~d)

# Specifying the `start_date = "2013-01-01"` might be preferable.
# Groups become (2013-01-01, 2013-01-02), (2013-01-03, 2013-01-04) and so on.
as_period(FB, 2~d, start_date = "2013-01-01")

}
