
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tsbox"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tsbox')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("relevant_class")
> ### * relevant_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: relevant_class
> ### Title: Extract Relevant Class
> ### Aliases: relevant_class
> 
> ### ** Examples
> 
> relevant_class(AirPassengers)
[1] "ts"
> relevant_class(ts_df(AirPassengers))
[1] "data.frame"
> 
> 
> 
> cleanEx()
> nameEx("ts_")
> ### * ts_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_
> ### Title: Constructing ts-Functions
> ### Aliases: ts_ load_suggested ts_apply
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_arithmetic")
> ### * ts_arithmetic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_arithmetic
> ### Title: Arithmetic Operators for ts-boxable objects
> ### Aliases: ts_arithmetic %ts+% %ts-% %ts*% %ts/%
> 
> ### ** Examples
> 
> head(fdeaths - mdeaths)
[1] -1233 -1174 -1050 -1200  -970  -843
> head(fdeaths %ts-% mdeaths)
[1] -1233 -1174 -1050 -1200  -970  -843
> head(ts_df(fdeaths) %ts-% mdeaths)
        time value
1 1974-01-01 -1233
2 1974-02-01 -1174
3 1974-03-01 -1050
4 1974-04-01 -1200
5 1974-05-01  -970
6 1974-06-01  -843
> 
> 
> 
> cleanEx()
> nameEx("ts_bind")
> ### * ts_bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_bind
> ### Title: Bind Time Series
> ### Aliases: ts_bind ts_chain
> 
> ### ** Examples
> 
> ts_bind(ts_span(mdeaths, end = "1975-12-01"), fdeaths)
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1974 2134 1863 1877 1877 1492 1249 1280 1131 1209 1492 1621 1846
1975 2103 2137 2153 1833 1403 1288 1186 1133 1053 1347 1545 2066
1976  767 1141  896  532  447  420  376  330  357  445  546  764
1977  862  660  663  643  502  392  411  348  387  385  411  638
1978  796  853  737  546  530  446  431  362  387  430  425  679
1979  821  785  727  612  478  429  405  379  393  411  487  574
> ts_bind(mdeaths, c(2, 2))
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1974 2134 1863 1877 1877 1492 1249 1280 1131 1209 1492 1621 1846
1975 2103 2137 2153 1833 1403 1288 1186 1133 1053 1347 1545 2066
1976 2020 2750 2283 1479 1189 1160 1113  970  999 1208 1467 2059
1977 2240 1634 1722 1801 1246 1162 1087 1013  959 1179 1229 1655
1978 2019 2284 1942 1423 1340 1187 1098 1004  970 1140 1110 1812
1979 2263 1820 1846 1531 1215 1075 1056  975  940 1081 1294 1341
1980    2    2                                                  
> ts_bind(mdeaths, 3, ts_bind(fdeaths, c(99, 2)))
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1974 2134 1863 1877 1877 1492 1249 1280 1131 1209 1492 1621 1846
1975 2103 2137 2153 1833 1403 1288 1186 1133 1053 1347 1545 2066
1976 2020 2750 2283 1479 1189 1160 1113  970  999 1208 1467 2059
1977 2240 1634 1722 1801 1246 1162 1087 1013  959 1179 1229 1655
1978 2019 2284 1942 1423 1340 1187 1098 1004  970 1140 1110 1812
1979 2263 1820 1846 1531 1215 1075 1056  975  940 1081 1294 1341
1980    3    2                                                  
> ts_bind(ts_dt(mdeaths), AirPassengers)
           time value
  1: 1949-01-01   112
  2: 1949-02-01   118
  3: 1949-03-01   132
  4: 1949-04-01   129
  5: 1949-05-01   121
 ---                 
212: 1979-08-01   975
213: 1979-09-01   940
214: 1979-10-01  1081
215: 1979-11-01  1294
216: 1979-12-01  1341
> 
> # numeric vectors
> ts_bind(12, AirPassengers, c(2, 3))
     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
1948                                              12
1949 112 118 132 129 121 135 148 148 136 119 104 118
1950 115 126 141 135 125 149 170 170 158 133 114 140
1951 145 150 178 163 172 178 199 199 184 162 146 166
1952 171 180 193 181 183 218 230 242 209 191 172 194
1953 196 196 236 235 229 243 264 272 237 211 180 201
1954 204 188 235 227 234 264 302 293 259 229 203 229
1955 242 233 267 269 270 315 364 347 312 274 237 278
1956 284 277 317 313 318 374 413 405 355 306 271 306
1957 315 301 356 348 355 422 465 467 404 347 305 336
1958 340 318 362 348 363 435 491 505 404 359 310 337
1959 360 342 406 396 420 472 548 559 463 407 362 405
1960 417 391 419 461 472 535 622 606 508 461 390 432
1961   2   3                                        
> 
> ts_chain(ts_span(mdeaths, end = "1975-12-01"), fdeaths)
           Jan       Feb       Mar       Apr       May       Jun       Jul
1974 2134.0000 1863.0000 1877.0000 1877.0000 1492.0000 1249.0000 1280.0000
1975 2103.0000 2137.0000 2153.0000 1833.0000 1403.0000 1288.0000 1186.0000
1976 2055.2815 3057.4656 2400.9546 1425.5668 1197.7977 1125.4475 1007.5435
1977 2309.8470 1768.5603 1776.5992 1723.0065 1345.1777 1050.4176 1101.3307
1978 2132.9909 2285.7302 1974.8923 1463.0817 1420.2075 1195.1180 1154.9235
1979 2199.9818 2103.5149 1948.0960 1639.9377 1280.8664 1149.5642 1085.2529
           Aug       Sep       Oct       Nov       Dec
1974 1131.0000 1209.0000 1492.0000 1621.0000 1846.0000
1975 1133.0000 1053.0000 1347.0000 1545.0000 2066.0000
1976  884.2802  956.6304 1192.4384 1463.0817 2047.2425
1977  932.5136 1037.0195 1031.6602 1101.3307 1709.6083
1978  970.0285 1037.0195 1152.2438 1138.8457 1819.4734
1979 1015.5824 1053.0973 1101.3307 1304.9831 1538.1115
> 
> 
> 
> cleanEx()
> nameEx("ts_boxable")
> ### * ts_boxable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_boxable
> ### Title: Test if an Object is ts-Boxable
> ### Aliases: ts_boxable
> 
> ### ** Examples
> 
> ts_boxable(AirPassengers)
[1] TRUE
> ts_boxable(lm)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("ts_c")
> ### * ts_c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_c
> ### Title: Collect Time Series
> ### Aliases: ts_c
> 
> ### ** Examples
> 
> head(ts_c(ts_df(EuStockMarkets), AirPassengers))
   id                time   value
1 DAX 1991-07-01 03:18:27 1628.75
2 DAX 1991-07-02 13:01:32 1613.63
3 DAX 1991-07-03 22:44:38 1606.51
4 DAX 1991-07-05 08:27:43 1621.04
5 DAX 1991-07-06 18:10:48 1618.16
6 DAX 1991-07-08 03:53:53 1610.61
> 
> # labeling
> x <- ts_c(
+   `International Airline Passengers` = ts_xts(AirPassengers),
+   `Deaths from Lung Diseases` = ldeaths
+ )
Loading required namespace: xts
> head(x)
           International Airline Passengers Deaths from Lung Diseases
1949-01-01                              112                        NA
1949-02-01                              118                        NA
1949-03-01                              132                        NA
1949-04-01                              129                        NA
1949-05-01                              121                        NA
1949-06-01                              135                        NA
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_default")
> ### * ts_default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_default
> ### Title: Default Column Names
> ### Aliases: ts_default
> 
> ### ** Examples
> 
> 
> df <- ts_df(ts_c(mdeaths, fdeaths))
> # non-default colnames
> colnames(df) <- c("id", "date", "count")
> # switch back to default colnames
> head(ts_default(df))
[time]: 'date' [value]: 'count' 
       id       time value
1 mdeaths 1974-01-01  2134
2 mdeaths 1974-02-01  1863
3 mdeaths 1974-03-01  1877
4 mdeaths 1974-04-01  1877
5 mdeaths 1974-05-01  1492
6 mdeaths 1974-06-01  1249
> 
> 
> 
> cleanEx()
> nameEx("ts_examples")
> ### * ts_examples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_examples
> ### Title: Principal Components, Dygraphs, Forecasts, Seasonal Adjustment
> ### Aliases: ts_examples ts_prcomp ts_dygraphs ts_forecast ts_seas
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_frequency")
> ### * ts_frequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_frequency
> ### Title: Change Frequency
> ### Aliases: ts_frequency
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_ggplot")
> ### * ts_ggplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_ggplot
> ### Title: Plot Time Series, Using ggplot2
> ### Aliases: ts_ggplot theme_tsbox colors_tsbox scale_color_tsbox
> ###   scale_fill_tsbox
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D library(dataseries)
> ##D dta <- ds(c("GDP.PBRTT.A.R", "CCI.CCIIR"), "xts")
> ##D ts_ggplot(ts_scale(ts_span(
> ##D     ts_c(
> ##D       `GDP Growth` = ts_pc(dta[, 'GDP.PBRTT.A.R']),
> ##D       `Consumer Sentiment Index` = dta[, 'CCI.CCIIR']
> ##D     ),
> ##D     start = "1995-01-01"
> ##D   ))) +
> ##D   ggplot2::ggtitle("GDP and Consumer Sentiment", subtitle = "normalized values") +
> ##D   theme_tsbox() +
> ##D   scale_color_tsbox()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ts_index")
> ### * ts_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_index
> ### Title: Indices from Levels or Percentage Rates
> ### Aliases: ts_index ts_compound
> 
> ### ** Examples
> 
> head(ts_compound(ts_pc(ts_c(fdeaths, mdeaths))))
       fdeaths   mdeaths
[1,] 1.0000000 1.0000000
[2,] 0.7647059 0.8730084
[3,] 0.9178690 0.8795689
[4,] 0.7513873 0.8795689
[5,] 0.5793563 0.6991565
[6,] 0.4506104 0.5852858
> head(ts_index(ts_df(ts_c(fdeaths, mdeaths)), "1974-02-01"))
       id       time     value
1 fdeaths 1974-01-01 1.3076923
2 fdeaths 1974-02-01 1.0000000
3 fdeaths 1974-03-01 1.2002903
4 fdeaths 1974-04-01 0.9825835
5 fdeaths 1974-05-01 0.7576197
6 fdeaths 1974-06-01 0.5892598
> 
> 
> 
> cleanEx()
> nameEx("ts_lag")
> ### * ts_lag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_lag
> ### Title: Lag or Lead of Time Series
> ### Aliases: ts_lag
> 
> ### ** Examples
> 
> head(ts_lag(fdeaths, "1 month"))
[1] 901 689 827 677 522 406
> head(ts_lag(fdeaths, "1 year"))
[1] 901 689 827 677 522 406
> head(ts_lag(ts_df(fdeaths), "2 day"))
        time value
1 1974-01-03   901
2 1974-02-03   689
3 1974-03-03   827
4 1974-04-03   677
5 1974-05-03   522
6 1974-06-03   406
> head(ts_lag(ts_df(fdeaths), "2 min"))
                 time value
1 1973-12-31 19:02:00   901
2 1974-01-31 19:02:00   689
3 1974-03-03 19:02:00   827
4 1974-03-31 19:02:00   677
5 1974-05-01 19:02:00   522
6 1974-05-31 19:02:00   406
> head(ts_lag(ts_df(fdeaths), "-1 day"))
        time value
1 1973-12-31   901
2 1974-01-31   689
3 1974-02-28   827
4 1974-03-31   677
5 1974-04-30   522
6 1974-05-31   406
> 
> 
> 
> cleanEx()
> nameEx("ts_long")
> ### * ts_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_long
> ### Title: Reshaping Multiple Time Series
> ### Aliases: ts_long ts_wide
> 
> ### ** Examples
> 
> df.wide <- ts_wide(ts_df(ts_c(mdeaths, fdeaths)))
> head(df.wide)
        time mdeaths fdeaths
1 1974-01-01    2134     901
2 1974-02-01    1863     689
3 1974-03-01    1877     827
4 1974-04-01    1877     677
5 1974-05-01    1492     522
6 1974-06-01    1249     406
> head(ts_long(df.wide))
       id       time value
1 mdeaths 1974-01-01  2134
2 mdeaths 1974-02-01  1863
3 mdeaths 1974-03-01  1877
4 mdeaths 1974-04-01  1877
5 mdeaths 1974-05-01  1492
6 mdeaths 1974-06-01  1249
> 
> 
> 
> cleanEx()
> nameEx("ts_na_omit")
> ### * ts_na_omit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_na_omit
> ### Title: Omit NA values
> ### Aliases: ts_na_omit
> 
> ### ** Examples
> 
> x <- AirPassengers
> x[c(2, 4)] <- NA
> 
> # A ts object does only know explicit NAs
> head(ts_na_omit(x))
[1] 112  NA 132  NA 121 135
> 
> # by default, NAs are implicit in data frames
> head(ts_df(x))
        time value
1 1949-01-01   112
2 1949-02-01    NA
3 1949-03-01   132
4 1949-04-01    NA
5 1949-05-01   121
6 1949-06-01   135
> 
> # make NAs explicit
> head(ts_regular(ts_df(x)))
        time value
1 1949-01-01   112
2 1949-02-01    NA
3 1949-03-01   132
4 1949-04-01    NA
5 1949-05-01   121
6 1949-06-01   135
> 
> # and implicit again
> head(ts_na_omit(ts_regular(ts_df(x))))
        time value
1 1949-01-01   112
2 1949-03-01   132
3 1949-05-01   121
4 1949-06-01   135
5 1949-07-01   148
6 1949-08-01   148
> 
> 
> 
> cleanEx()
> nameEx("ts_pc")
> ### * ts_pc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_pc
> ### Title: First Differences and Percentage Change Rates
> ### Aliases: ts_pc ts_diff ts_pca ts_pcy ts_diffy
> 
> ### ** Examples
> 
> tail(ts_diff(ts_c(fdeaths, mdeaths)))
      fdeaths mdeaths
[67,]     -24     -19
[68,]     -26     -81
[69,]      14     -35
[70,]      18     141
[71,]      76     213
[72,]      87      47
> tail(ts_pc(ts_c(fdeaths, mdeaths)))
        fdeaths   mdeaths
[67,] -5.594406 -1.767442
[68,] -6.419753 -7.670455
[69,]  3.693931 -3.589744
[70,]  4.580153 15.000000
[71,] 18.491484 19.703978
[72,] 17.864476  3.632148
> tail(ts_pca(ts_c(fdeaths, mdeaths)))
        fdeaths   mdeaths
[67,] -49.88442 -19.26433
[68,] -54.89650 -61.62147
[69,]  54.53971 -35.51201
[70,]  71.15566 435.02501
[71,] 666.02981 765.57158
[72,] 618.77866  53.43838
> tail(ts_pcy(ts_c(fdeaths, mdeaths)))
         fdeaths    mdeaths
[67,]  -6.032483  -3.825137
[68,]   4.696133  -2.888446
[69,]   1.550388  -3.092784
[70,]  -4.418605  -5.175439
[71,]  14.588235  16.576577
[72,] -15.463918 -25.993377
> tail(ts_diffy(ts_c(fdeaths, mdeaths)))
      fdeaths mdeaths
[67,]     -26     -42
[68,]      17     -29
[69,]       6     -30
[70,]     -19     -59
[71,]      62     184
[72,]    -105    -471
> 
> 
> 
> cleanEx()
> nameEx("ts_pick")
> ### * ts_pick
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_pick
> ### Title: Pick Series (Experimental)
> ### Aliases: ts_pick
> 
> ### ** Examples
> 
> # Interactive use
> 
> # Programming use
> to.be.picked.and.renamed <- c(`My Dax` = "DAX", `My Smi` = "SMI")
> head(ts_pick(EuStockMarkets, to.be.picked.and.renamed))
      My Dax My Smi
[1,] 1628.75 1678.1
[2,] 1613.63 1688.5
[3,] 1606.51 1678.6
[4,] 1621.04 1684.1
[5,] 1618.16 1686.6
[6,] 1610.61 1671.6
> 
> 
> 
> cleanEx()
> nameEx("ts_plot")
> ### * ts_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_plot
> ### Title: Plot Time Series
> ### Aliases: ts_plot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_regular")
> ### * ts_regular
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_regular
> ### Title: Enforce Regularity
> ### Aliases: ts_regular
> 
> ### ** Examples
> 
> x0 <- AirPassengers
> x0[c(10, 15)] <- NA
> x <- ts_na_omit(ts_dts(x0))
> ts_regular(x)
           time value
  1: 1949-01-01   112
  2: 1949-02-01   118
  3: 1949-03-01   132
  4: 1949-04-01   129
  5: 1949-05-01   121
 ---                 
140: 1960-08-01   606
141: 1960-09-01   508
142: 1960-10-01   461
143: 1960-11-01   390
144: 1960-12-01   432
> ts_regular(x, fill = 0)
           time value
  1: 1949-01-01   112
  2: 1949-02-01   118
  3: 1949-03-01   132
  4: 1949-04-01   129
  5: 1949-05-01   121
 ---                 
140: 1960-08-01   606
141: 1960-09-01   508
142: 1960-10-01   461
143: 1960-11-01   390
144: 1960-12-01   432
> 
> m <- mdeaths
> m[c(10, 69)] <- NA
> f <- fdeaths
> f[c(1, 3, 15)] <- NA
> 
> ts_regular(ts_na_omit(ts_dts(ts_c(f, m))))
     id       time value
  1:  f 1974-02-01   689
  2:  f 1974-03-01    NA
  3:  f 1974-04-01   677
  4:  f 1974-05-01   522
  5:  f 1974-06-01   406
 ---                    
139:  m 1979-08-01   975
140:  m 1979-09-01    NA
141:  m 1979-10-01  1081
142:  m 1979-11-01  1294
143:  m 1979-12-01  1341
> 
> 
> 
> cleanEx()
> nameEx("ts_scale")
> ### * ts_scale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_scale
> ### Title: Normalized Time Series
> ### Aliases: ts_scale
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_span")
> ### * ts_span
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_span
> ### Title: Limit Time Span
> ### Aliases: ts_span
> 
> ### ** Examples
> 
> 
> 
> # Limit span of 'discoveries' to the same span as 'AirPassengers'
> ts_span(discoveries, template = AirPassengers)
Time Series:
Start = 1949 
End = 1959 
Frequency = 1 
 [1] 3 2 1 4 1 1 1 0 0 2 0
> ts_span(mdeaths, end = "19801201", extend = TRUE)
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1974 2134 1863 1877 1877 1492 1249 1280 1131 1209 1492 1621 1846
1975 2103 2137 2153 1833 1403 1288 1186 1133 1053 1347 1545 2066
1976 2020 2750 2283 1479 1189 1160 1113  970  999 1208 1467 2059
1977 2240 1634 1722 1801 1246 1162 1087 1013  959 1179 1229 1655
1978 2019 2284 1942 1423 1340 1187 1098 1004  970 1140 1110 1812
1979 2263 1820 1846 1531 1215 1075 1056  975  940 1081 1294 1341
1980   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
> 
> 
> 
> cleanEx()
> nameEx("ts_summary")
> ### * ts_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_summary
> ### Title: Time Series Properties
> ### Aliases: ts_summary
> 
> ### ** Examples
> 
> ts_summary(ts_c(mdeaths, austres))
       id obs    diff freq      start        end
1 mdeaths  72 1 month   12 1974-01-01 1979-12-01
2 austres  89 3 month    4 1971-04-01 1993-04-01
> ts_summary(ts_c(mdeaths, austres), spark = TRUE)
       id obs    diff freq      start        end      spark_line
1 mdeaths  72 1 month   12 1974-01-01 1979-12-01  ⠈⠔⠢⡐⢄         
2 austres  89 3 month    4 1971-04-01 1993-04-01 ⣀⣀⣀⣀⡠⠤⠤⠤⠒⠒⠒⠊⠉⠉⠉
> # Extracting specific properties
> ts_summary(AirPassengers)$start
[1] "1949-01-01"
> ts_summary(AirPassengers)$freq
[1] 12
> ts_summary(AirPassengers)$obs
[1] 144
> 
> 
> 
> cleanEx()
> nameEx("ts_trend")
> ### * ts_trend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_trend
> ### Title: Loess Trend Estimation
> ### Aliases: ts_trend
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_ts")
> ### * ts_ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ts_ts
> ### Title: Convert Everything to Everything
> ### Aliases: ts_ts ts_data.frame ts_df ts_data.table ts_dt ts_tbl
> ###   ts_tibbletime ts_timeSeries ts_tis ts_irts ts_tsibble ts_tslist
> ###   ts_xts ts_zoo
> 
> ### ** Examples
> 
> 
> x.ts <- ts_c(mdeaths, fdeaths)
> head(x.ts)
     mdeaths fdeaths
[1,]    2134     901
[2,]    1863     689
[3,]    1877     827
[4,]    1877     677
[5,]    1492     522
[6,]    1249     406
> head(ts_df(x.ts))
       id       time value
1 mdeaths 1974-01-01  2134
2 mdeaths 1974-02-01  1863
3 mdeaths 1974-03-01  1877
4 mdeaths 1974-04-01  1877
5 mdeaths 1974-05-01  1492
6 mdeaths 1974-06-01  1249
> 
> suppressMessages(library(dplyr))
> head(ts_tbl(x.ts))
[90m# A tibble: 6 x 3[39m
  id      time       value
  [3m[90m<chr>[39m[23m   [3m[90m<date>[39m[23m     [3m[90m<dbl>[39m[23m
[90m1[39m mdeaths 1974-01-01  [4m2[24m134
[90m2[39m mdeaths 1974-02-01  [4m1[24m863
[90m3[39m mdeaths 1974-03-01  [4m1[24m877
[90m4[39m mdeaths 1974-04-01  [4m1[24m877
[90m5[39m mdeaths 1974-05-01  [4m1[24m492
[90m6[39m mdeaths 1974-06-01  [4m1[24m249
> 
> suppressMessages(library(data.table))
> head(ts_dt(x.ts))
        id       time value
1: mdeaths 1974-01-01  2134
2: mdeaths 1974-02-01  1863
3: mdeaths 1974-03-01  1877
4: mdeaths 1974-04-01  1877
5: mdeaths 1974-05-01  1492
6: mdeaths 1974-06-01  1249
> 
> suppressMessages(library(xts))
Warning: package ‘zoo’ was built under R version 3.6.2
> head(ts_xts(x.ts))
           mdeaths fdeaths
1974-01-01    2134     901
1974-02-01    1863     689
1974-03-01    1877     827
1974-04-01    1877     677
1974-05-01    1492     522
1974-06-01    1249     406
> 
> # heuristic time conversion
> # 1 month: approx. 1/12 year
> head(ts_df(AirPassengers))
        time value
1 1949-01-01   112
2 1949-02-01   118
3 1949-03-01   132
4 1949-04-01   129
5 1949-05-01   121
6 1949-06-01   135
> 
> # exact time conversion
> # 1 trading day: exactly 1/260 year
> head(ts_df(EuStockMarkets))
   id                time   value
1 DAX 1991-07-01 03:18:27 1628.75
2 DAX 1991-07-02 13:01:32 1613.63
3 DAX 1991-07-03 22:44:38 1606.51
4 DAX 1991-07-05 08:27:43 1621.04
5 DAX 1991-07-06 18:10:48 1618.16
6 DAX 1991-07-08 03:53:53 1610.61
> 
> # multiple id
> multi.id.df <- rbind(
+   within(ts_df(ts_c(fdeaths, mdeaths)), type <- "level"),
+   within(ts_pc(ts_df(ts_c(fdeaths, mdeaths))), type <- "pc")
+ )
> head(ts_ts(multi.id.df))
     fdeaths_level mdeaths_level fdeaths_pc  mdeaths_pc
[1,]           901          2134         NA          NA
[2,]           689          1863  -23.52941 -12.6991565
[3,]           827          1877   20.02903   0.7514761
[4,]           677          1877  -18.13785   0.0000000
[5,]           522          1492  -22.89513 -20.5114544
[6,]           406          1249  -22.22222 -16.2868633
> ts_plot(multi.id.df)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:xts’, ‘package:zoo’, ‘package:data.table’,
  ‘package:dplyr’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.575 0.531 2.263 0.002 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
